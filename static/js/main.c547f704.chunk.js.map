{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","className","bottom","href","left","right","rootElement","document","getElementById","ReactDOM","render","Boolean","window","location","hostname","match","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4MAMA,SAASA,IAEP,OACE,6BACI,yBAAKC,UAAU,SAAf,kCACA,yBAAKA,UAAU,SACf,+CAAoB,0BAAMA,UAAU,WAAhB,WAApB,wCACA,gDAEF,kBAAC,IAAD,CAAMC,QAAM,GACV,4BAAI,0BAAMD,UAAU,aAAhB,cACJ,6BACA,iDACA,4BAAI,qCAAJ,6CAEA,4BAAI,0BAAMA,UAAU,aAAhB,cACJ,4BAAI,uBAAGE,KAAK,mCAAR,WAAJ,yBACA,4BAAI,uBAAGA,KAAM,IAAT,wBAAJ,4CACA,4BAAI,0BAAMF,UAAU,aAAhB,cAEJ,kBAAC,IAAD,CAAMG,MAAI,GACV,iCAAM,0BAAMH,UAAU,WAAhB,iBAAN,yEAEA,kBAAC,IAAD,CAAMI,OAAK,GACX,uCACW,0BAAMJ,UAAU,WAAhB,aADX,iCAIA,kBAAC,IAAD,CAAMG,MAAI,GACV,4CAAiB,0BAAMH,UAAU,WAAhB,UAAjB,MAEA,kBAAC,IAAD,CAAMC,QAAM,GACZ,4BAAI,0BAAMD,UAAU,aAAhB,cACJ,yBAAKA,UAAU,SACf,uBAAGE,KAAK,6CAA4C,uBAAGF,UAAU,sBACjE,uBAAGE,KAAK,+BAA8B,uBAAGF,UAAU,mBACnD,uBAAGE,KAAK,qDAAoD,uBAAGF,UAAU,wBACzE,uBAAGE,KAAK,iCAAgC,uBAAGF,UAAU,sBAOrD,uBAAGA,UAAU,QAAb,8BAOR,IAAMK,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO,kBAAC,EAAD,MAASJ,GAEVN,QChDKW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNN,IAASC,OACP,kBAAC,IAAMM,WAAP,KACE,kBAAC,EAAD,OAEFT,SAASC,eAAe,SDyHpB,kBAAmBS,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c547f704.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Fade from 'react-reveal/Fade';\n\nimport \"./App.css\";\n\nfunction App() {\n\n  return (\n    <div>\n        <div className=\"title\" > Not a portfolio ðŸ˜‹ </div>\n        <div className=\"quote\">\n        <h1>\"Your boos mean <span className=\"nothing\">nothing</span>, I've seen what makes you cheer.\" </h1>\n        <div>- Rick Sanchez</div>\n      </div>\n      <Fade bottom>\n        <h1><span className=\"highlight\">Currently</span></h1>\n        <div>\n        <ul>Grinding Leetcode</ul>\n        <ul><b>Groovr</b> - Meet people with similar music taste </ul>\n        </div>\n        <h1><span className=\"highlight\">Worked on</span></h1>\n        <ul><a href=\"https://list-ify.herokuapp.com/\">Listify</a>- A productivity app.</ul>\n        <ul><a href= \"\">Discord Football Bot</a>- Get live scores from all major leagues</ul>\n        <h1><span className=\"highlight\">I am ...</span></h1>\n        </Fade>\n        <Fade left>\n        <p>an <span className=\"nothing\">undergraduate</span> pursuing a degree in Computer Science at VIT Vellore (Class of '22)</p>\n        </Fade>\n        <Fade right>\n        <p>\n          probably <span className=\"nothing\">listening</span> to Jeremy Zucker right now.\n        </p>\n        </Fade>\n        <Fade left>\n        <p>available for <span className=\"nothing\">collab</span>!</p>\n        </Fade>\n        <Fade bottom>\n        <h1><span className=\"highlight\">Find me @</span></h1>\n        <div className=\"logos\">\n        <a href=\"https://www.instagram.com/vapranav/?hl=en\"><i className=\"fab fa-instagram\"></i></a>\n        <a href=\"https://github.com/vapranav\"><i className=\"fab fa-github\"></i></a>\n        <a href=\"https://www.linkedin.com/in/pranav-v-a-a566031a4/\"><i className=\"fab fa-linkedin-in\"></i></a>\n        <a href=\"https://twitter.com/PranavVA1\"><i className=\"fab fa-twitter\"></i></a>\n\n        \n        \n        \n        </div>\n        </Fade>\n        <p className=\"copy\">Copyrighted? Copyrighted.</p>  \n    </div>\n    \n    \n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}